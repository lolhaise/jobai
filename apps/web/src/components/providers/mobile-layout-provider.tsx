'use client'

// Mobile layout provider for responsive design and PWA features
import { createContext, useContext, useEffect, useState, ReactNode } from 'react'
// Import Next.js navigation hooks
import { usePathname } from 'next/navigation'
// Import mobile navigation components
import { MobileNav } from '@/components/navigation/MobileNav'
import { BottomNav } from '@/components/navigation/BottomNav'
// Import push notification utilities
import { createPushNotificationManager, PushNotificationManager } from '@/lib/push-notifications'

// Interface for mobile layout context
interface MobileLayoutContextType {\n  isMobile: boolean // Whether current viewport is mobile\n  isTablet: boolean // Whether current viewport is tablet\n  isDesktop: boolean // Whether current viewport is desktop\n  orientation: 'portrait' | 'landscape' | null // Device orientation\n  isOnline: boolean // Network connectivity status\n  isInstalled: boolean // Whether app is installed as PWA\n  pushManager: PushNotificationManager | null // Push notification manager\n  showInstallPrompt: () => void // Function to show install prompt\n}\n\n// Create mobile layout context with default values\nconst MobileLayoutContext = createContext<MobileLayoutContextType>({\n  isMobile: false,\n  isTablet: false,\n  isDesktop: true,\n  orientation: null,\n  isOnline: true,\n  isInstalled: false,\n  pushManager: null,\n  showInstallPrompt: () => {}\n})\n\n// Hook to use mobile layout context\nexport function useMobileLayout() {\n  const context = useContext(MobileLayoutContext)\n  if (!context) {\n    throw new Error('useMobileLayout must be used within a MobileLayoutProvider')\n  }\n  return context\n}\n\n// Props for mobile layout provider\ninterface MobileLayoutProviderProps {\n  children: ReactNode // Child components to wrap\n}\n\n// Mobile layout provider component\nexport function MobileLayoutProvider({ children }: MobileLayoutProviderProps) {\n  // Current route pathname for conditional rendering\n  const pathname = usePathname()\n  \n  // State for responsive breakpoints\n  const [isMobile, setIsMobile] = useState(false)\n  const [isTablet, setIsTablet] = useState(false)\n  const [isDesktop, setIsDesktop] = useState(true)\n  \n  // State for device orientation\n  const [orientation, setOrientation] = useState<'portrait' | 'landscape' | null>(null)\n  \n  // State for network connectivity\n  const [isOnline, setIsOnline] = useState(true)\n  \n  // State for PWA installation\n  const [isInstalled, setIsInstalled] = useState(false)\n  const [deferredPrompt, setDeferredPrompt] = useState<any>(null)\n  \n  // State for push notification manager\n  const [pushManager, setPushManager] = useState<PushNotificationManager | null>(null)\n\n  // Effect to handle responsive breakpoints and orientation\n  useEffect(() => {\n    // Function to update responsive state based on viewport\n    const updateResponsiveState = () => {\n      const width = window.innerWidth\n      const height = window.innerHeight\n      \n      // Update breakpoint states\n      setIsMobile(width < 768) // Mobile: < 768px\n      setIsTablet(width >= 768 && width < 1024) // Tablet: 768px - 1023px\n      setIsDesktop(width >= 1024) // Desktop: >= 1024px\n      \n      // Update orientation\n      setOrientation(height > width ? 'portrait' : 'landscape')\n    }\n\n    // Set initial state\n    updateResponsiveState()\n    \n    // Add resize event listener\n    window.addEventListener('resize', updateResponsiveState)\n    \n    // Add orientation change listener for better mobile support\n    window.addEventListener('orientationchange', () => {\n      // Delay to allow orientation change to complete\n      setTimeout(updateResponsiveState, 100)\n    })\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('resize', updateResponsiveState)\n      window.removeEventListener('orientationchange', updateResponsiveState)\n    }\n  }, [])\n\n  // Effect to monitor online/offline status\n  useEffect(() => {\n    // Function to update online status\n    const updateOnlineStatus = () => {\n      setIsOnline(navigator.onLine)\n    }\n\n    // Set initial online status\n    updateOnlineStatus()\n\n    // Add online/offline event listeners\n    window.addEventListener('online', updateOnlineStatus)\n    window.addEventListener('offline', updateOnlineStatus)\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('online', updateOnlineStatus)\n      window.removeEventListener('offline', updateOnlineStatus)\n    }\n  }, [])\n\n  // Effect to handle PWA installation detection and prompt\n  useEffect(() => {\n    // Check if app is already installed\n    const checkInstallStatus = () => {\n      // Check for standalone mode (app is installed)\n      const isStandalone = window.matchMedia('(display-mode: standalone)').matches ||\n        window.navigator.standalone === true\n      setIsInstalled(isStandalone)\n    }\n\n    // Function to handle beforeinstallprompt event\n    const handleBeforeInstallPrompt = (e: Event) => {\n      // Prevent Chrome 67 and earlier from automatically showing the prompt\n      e.preventDefault()\n      // Store the event for later use\n      setDeferredPrompt(e)\n    }\n\n    // Function to handle app installed event\n    const handleAppInstalled = () => {\n      setIsInstalled(true)\n      setDeferredPrompt(null)\n      console.log('[PWA] App was installed successfully')\n    }\n\n    // Check initial install status\n    checkInstallStatus()\n\n    // Add event listeners for PWA installation\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)\n    window.addEventListener('appinstalled', handleAppInstalled)\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)\n      window.removeEventListener('appinstalled', handleAppInstalled)\n    }\n  }, [])\n\n  // Effect to initialize push notification manager\n  useEffect(() => {\n    // Initialize push notifications only on client side\n    const initializePushManager = async () => {\n      try {\n        // Use environment variable for VAPID key or fallback\n        const vapidKey = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || \n          'BHdSEE0T9S2K8zzzQGXHvN5nNKRvqPtJ2gNp4rWzm8Mw4J6YdJzV5F8HXeq7T3X9N'\n        \n        const manager = createPushNotificationManager(vapidKey)\n        await manager.initialize()\n        setPushManager(manager)\n        \n        console.log('[PWA] Push notification manager initialized')\n      } catch (error) {\n        console.error('[PWA] Failed to initialize push notification manager:', error)\n      }\n    }\n\n    initializePushManager()\n  }, [])\n\n  // Function to show PWA install prompt\n  const showInstallPrompt = async () => {\n    if (!deferredPrompt) {\n      console.log('[PWA] No install prompt available')\n      return\n    }\n\n    try {\n      // Show the install prompt\n      deferredPrompt.prompt()\n      \n      // Wait for the user to respond to the prompt\n      const { outcome } = await deferredPrompt.userChoice\n      \n      if (outcome === 'accepted') {\n        console.log('[PWA] User accepted the install prompt')\n      } else {\n        console.log('[PWA] User dismissed the install prompt')\n      }\n      \n      // Clear the deferred prompt\n      setDeferredPrompt(null)\n    } catch (error) {\n      console.error('[PWA] Error showing install prompt:', error)\n    }\n  }\n\n  // Determine if mobile navigation should be shown\n  const shouldShowMobileNav = isMobile && !pathname.startsWith('/admin') && !pathname.startsWith('/auth')\n  \n  // Determine if bottom navigation should be shown\n  const shouldShowBottomNav = isMobile && !pathname.startsWith('/admin') && !pathname.startsWith('/auth')\n\n  // Create context value\n  const contextValue: MobileLayoutContextType = {\n    isMobile,\n    isTablet,\n    isDesktop,\n    orientation,\n    isOnline,\n    isInstalled,\n    pushManager,\n    showInstallPrompt\n  }\n\n  return (\n    <MobileLayoutContext.Provider value={contextValue}>\n      {/* Main content wrapper */}\n      <div className=\"relative min-h-screen bg-white\">\n        {/* Mobile top navigation - only show on mobile devices */}\n        {shouldShowMobileNav && <MobileNav />}\n        \n        {/* Main content area with responsive padding */}\n        <main className={`\n          ${shouldShowMobileNav ? 'pt-16' : ''} \n          ${shouldShowBottomNav ? 'pb-20' : ''}\n          min-h-screen\n        `}>\n          {children}\n        </main>\n        \n        {/* Mobile bottom navigation - only show on mobile devices */}\n        {shouldShowBottomNav && <BottomNav />}\n        \n        {/* Offline indicator */}\n        {!isOnline && (\n          <div className=\"fixed top-0 left-0 right-0 z-50 bg-orange-500 text-white text-center py-1 text-sm\">\n            You're currently offline\n          </div>\n        )}\n        \n        {/* Install app prompt banner (only show if not installed and prompt is available) */}\n        {isMobile && !isInstalled && deferredPrompt && (\n          <div className=\"fixed bottom-0 left-0 right-0 z-40 bg-blue-600 text-white p-4 shadow-lg md:hidden\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">Install JobAI</p>\n                <p className=\"text-xs opacity-90\">Get the full app experience</p>\n              </div>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={() => setDeferredPrompt(null)}\n                  className=\"px-3 py-1 text-xs border border-white/20 rounded\"\n                >\n                  Not now\n                </button>\n                <button\n                  onClick={showInstallPrompt}\n                  className=\"px-3 py-1 text-xs bg-white text-blue-600 rounded font-medium\"\n                >\n                  Install\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </MobileLayoutContext.Provider>\n  )\n}